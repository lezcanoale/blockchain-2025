Documentación del proyecto

1. Estructura del circuito.
El circuito implementa una verificación criptografica donde un usuario demuestra conocimiento de dos numeros secretos a y b,
tales que c = (a² + b²) % p, donde p es un número primo. Antes de ingresar al circuito se verificar que la entrada p sea un numero primo.

Componentes:
  A. Modulo(n)
  Verifica que resto = dividendo % divisor, asegurando que 0 <= resto < divisor.

  Entradas:
  dividend - dividendo
  divisor - divisor

  Salidas:
  remainder - resto

  Restricciones:
  divisor != 0
  dividendo === cociente * divisor + resto
  resto < divisor

  B. MainCircuit()
  Verifica que c = (a² + b²) % p y garantiza que p != 0.

  Entradas:
  a - número secreto
  b - número secreto
  p - número primo publico

  Salidas:
  c - resultado publico de la operacion

2. Proceso de generación de pruebas

  Herramientas:
  - Circom: Para compilar el circuito
  - SnarkJS: Para generar las pruebas

  Paso 1:
  Compilar el circuito con Circom
  (Codigo de ejemplo) - Ver en README.md
  $ circom circuit.circom --r1cs --wasm

  Paso 2:
  Trusted Setup - Generación de parametros de confianza
  (Codigo de ejemplo) - Ver en README.md
  $ snarkjs powersoftau new bn128 12 "$PROJECT_DIR/build/pot12_0000.ptau"
  $ snarkjs powersoftau contribute "$PROJECT_DIR/build/pot12_0000.ptau" "$PROJECT_DIR/build/pot12_0001.ptau" --name="Contribucion 1" -v -e="..."
  $ snarkjs powersoftau prepare phase2 "$PROJECT_DIR/build/pot12_0001.ptau" "$PROJECT_DIR/build/pot12_final.ptau"

  Paso 3:
  Generar entradas aleatorias y testigos
  (Codigo de ejemplo) - Ver en README.md
  $ echo "{ \"a\": $(((RANDOM % 9) + 1)), \"b\": $(((RANDOM % 9) + 1)), \"p\": $(((RANDOM % 9) + 1)) }" >"$INPUT_DIR/input$i.json"
  $ node "$CIRCUIT_DIR/generate_witness.js" "$CIRCUIT_DIR/circuit.wasm" "$INPUT_DIR/input$i.json" "$BUILD_DIR/witness$i.wtns"

  Paso 4:
  Generar pruebas ZK
  (Codigo de ejemplo) - Ver en README.md
  snarkjs groth16 prove "$BUILD_DIR/circuit_0001.zkey" "$BUILD_DIR/witness$i.wtns" "$BUILD_DIR/proof$i.json" "$BUILD_DIR/public$i.json"

3. Proceso de verificacion
  
  Paso 1:
  Verificar la prueba ZK
  (Codigo de ejemplo) - Ver en README.md
  snarkjs groth16 verify "$BUILD_DIR/verification_key.json" "$BUILD_DIR/public$i.json" "$BUILD_DIR/proof$i.json"

  Paso 2:
  Generar el contrato de verificacion
  (Codigo de ejemplo) - Ver en README.md
  snarkjs zkey export solidityverifier "$BUILD_DIR/circuit_0001.zkey" "$BUILD_DIR/verifier.sol"

  Prueba con nodeJS
  $ node verify.js

4. Ejemplos de uso:
  Caso: { "a": 3, "b": 4, "p": 5 }
  Calculo: c = (3² + 4²) % 5 = (9 + 16) % 5 = 25 % 5 = 0
  Resultado: public.json: ["5", "0"].
  La verificación de la prueba ZK es exitosa.
  { "a": 2, "b": 3, "p": 7 }

  Caso: { "a": 2, "b": 3, "p": 7 }
  Calculo: c = (2² + 3²) % 7 = (4 + 9) % 7 = 13 % 7 = 6
  Resultado: public.json: ["7", "6"].
  Modificación maliciosa: public.json a ["7", "5"]
  La verificación de la prueba ZK falla.




